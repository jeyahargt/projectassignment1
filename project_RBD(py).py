{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1fad4422",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.common.exceptions import NoSuchElementException\n",
    "from selenium.common.exceptions import TimeoutException\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "\n",
    "# Initialize WebDriver\n",
    "driver = webdriver.Chrome()\n",
    "\n",
    "try:\n",
    "    driver.get('https://www.redbus.in')\n",
    "    \n",
    "    # Wait until the element is present\n",
    "    wait = WebDriverWait(driver, 10)\n",
    "    view_all = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'a[href=\"https://www.redbus.in/online-booking/rtc-directory\"]')))\n",
    "    \n",
    "    # Perform actions on the element\n",
    "    view_all.click()\n",
    "    \n",
    "finally:\n",
    "    driver.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1de6076d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      route_name  \\\n",
      "0               Jodhpur to Ajmer   \n",
      "1               Jodhpur to Ajmer   \n",
      "2               Jodhpur to Ajmer   \n",
      "3               Jodhpur to Ajmer   \n",
      "4               Jodhpur to Ajmer   \n",
      "..                           ...   \n",
      "745  Udaipur to Pali (Rajasthan)   \n",
      "746  Udaipur to Pali (Rajasthan)   \n",
      "747  Udaipur to Pali (Rajasthan)   \n",
      "748  Udaipur to Pali (Rajasthan)   \n",
      "749  Udaipur to Pali (Rajasthan)   \n",
      "\n",
      "                                            route_link  \\\n",
      "0    https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1    https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2    https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3    https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4    https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "..                                                 ...   \n",
      "745  https://www.redbus.in/bus-tickets/udaipur-to-p...   \n",
      "746  https://www.redbus.in/bus-tickets/udaipur-to-p...   \n",
      "747  https://www.redbus.in/bus-tickets/udaipur-to-p...   \n",
      "748  https://www.redbus.in/bus-tickets/udaipur-to-p...   \n",
      "749  https://www.redbus.in/bus-tickets/udaipur-to-p...   \n",
      "\n",
      "                                    busname  \\\n",
      "0                            RSRTC - 160781   \n",
      "1                            RSRTC - 192566   \n",
      "2                            RSRTC - 146314   \n",
      "3                            RSRTC - 185141   \n",
      "4                            RSRTC - 193343   \n",
      "..                                      ...   \n",
      "745  Chandra Travels (Apex Chandra Pvt Ltd)   \n",
      "746                Jain Parshwanath Travels   \n",
      "747                            Ravi Travels   \n",
      "748              Shri Paawan Shakti Travels   \n",
      "749                             M R Travels   \n",
      "\n",
      "                                       bustype departing_time duration  \\\n",
      "0    Super Luxury Volvo AC Seater Pushback 2+2          00:00  14h 00m   \n",
      "1                Semi Deluxe Non AC Seater 2+2          04:45  04h 30m   \n",
      "2    Super Luxury Volvo AC Seater Pushback 2+2          06:15  04h 00m   \n",
      "3    Super Luxury Volvo AC Seater Pushback 2+2          07:15  04h 00m   \n",
      "4                Semi Deluxe Non AC Seater 2+2          07:15  04h 45m   \n",
      "..                                         ...            ...      ...   \n",
      "745                NON AC Seater / Sleeper 2+1          22:30  04h 30m   \n",
      "746                      NON A/C Sleeper (2+1)          22:31  04h 48m   \n",
      "747             Non A/C Seater / Sleeper (2+1)          23:00  05h 45m   \n",
      "748                 A/C Seater / Sleeper (2+1)          23:00  05h 05m   \n",
      "749              NON A/C Seater/ Sleeper (2+1)          23:30  04h 30m   \n",
      "\n",
      "    reaching_time star_rating price seats_available  \n",
      "0           14:00         4.6   460              35  \n",
      "1           09:15         4.1   250              35  \n",
      "2           10:15         4.3   460              27  \n",
      "3           11:15         4.2   460              35  \n",
      "4           12:00         4.1   250              35  \n",
      "..            ...         ...   ...             ...  \n",
      "745         03:00         2.1   350              36  \n",
      "746         03:19         2.4   650              30  \n",
      "747         04:45         2.7   400              45  \n",
      "748         04:05         0.0   800              40  \n",
      "749         04:00         1.0   360              40  \n",
      "\n",
      "[750 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "rajasthan = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/rsrtc\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", rajasthan) \n",
    "#driver.find_element(By.LINK_TEXT, 'RSRTC').click()\n",
    "# rajasthan.click();\n",
    "time.sleep(3)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "rajasthan_route_names = []\n",
    "rajasthan_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        rajasthan_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        rajasthan_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(4)\n",
    "    scrape_data()\n",
    "\n",
    "# print(rajasthan_route_names)\n",
    "# print(rajasthan_route_links)\n",
    "\n",
    "df = pd.DataFrame(columns=['route_name', 'route_link', 'busname', 'bustype', 'departing_time', \n",
    "                           'duration', 'reaching_time', 'star_rating', 'price', 'seats_available'])\n",
    "\n",
    "count = 0\n",
    "for link in rajasthan_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(33):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 650);\")\n",
    "        time.sleep(0.25)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(rajasthan_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e769e4de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              route_name                                         route_link  \\\n",
      "0       Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1       Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2       Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3       Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4       Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "..                   ...                                                ...   \n",
      "774  Bangalore to Kannur  https://www.redbus.in/bus-tickets/bangalore-to...   \n",
      "775  Bangalore to Kannur  https://www.redbus.in/bus-tickets/bangalore-to...   \n",
      "776  Bangalore to Kannur  https://www.redbus.in/bus-tickets/bangalore-to...   \n",
      "777  Bangalore to Kannur  https://www.redbus.in/bus-tickets/bangalore-to...   \n",
      "778  Bangalore to Kannur  https://www.redbus.in/bus-tickets/bangalore-to...   \n",
      "\n",
      "             busname                                    bustype  \\\n",
      "0     RSRTC - 160781  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "1     RSRTC - 192566              Semi Deluxe Non AC Seater 2+2   \n",
      "2     RSRTC - 146314  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "3     RSRTC - 185141  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "4     RSRTC - 193343              Semi Deluxe Non AC Seater 2+2   \n",
      "..               ...                                        ...   \n",
      "774  Kalpaka Travels                 NON A/C Semi Sleeper (2+2)   \n",
      "775  Kalpaka Travels              NON A/C Seater/ Sleeper (2+1)   \n",
      "776      P K Travels                          A/C Sleeper (2+1)   \n",
      "777     Arya Travels                 NON A/C Semi Sleeper (2+2)   \n",
      "778    Kyros Connect                     A/C Semi Sleeper (2+2)   \n",
      "\n",
      "    departing_time duration reaching_time star_rating price seats_available  \n",
      "0            00:00  14h 00m         14:00         4.6   460              35  \n",
      "1            04:45  04h 30m         09:15         4.1   250              35  \n",
      "2            06:15  04h 00m         10:15         4.3   460              27  \n",
      "3            07:15  04h 00m         11:15         4.2   460              35  \n",
      "4            07:15  04h 45m         12:00         4.1   250              35  \n",
      "..             ...      ...           ...         ...   ...             ...  \n",
      "774          21:30  08h 15m         05:45         3.3   800              37  \n",
      "775          21:45  07h 35m         05:20         3.9   800              36  \n",
      "776          22:15  07h 15m         05:30         3.8  1100              15  \n",
      "777          21:55  07h 05m         05:00         3.3   795               1  \n",
      "778          23:00  07h 30m         06:30         4.2   899              30  \n",
      "\n",
      "[779 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "kerala = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/ksrtc-kerala\"]')\n",
    "kerala.click();\n",
    "time.sleep(3)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "kerala_route_names = []\n",
    "kerala_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        kerala_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        kerala_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(4)\n",
    "    scrape_data()\n",
    "\n",
    "# print(kerala_route_names)\n",
    "# print(kerala_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in kerala_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass    \n",
    "    \n",
    "    for t in range(22):     #scrolling 20 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 650);\")\n",
    "        time.sleep(0.3)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(kerala_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    #df.append(dict, ignore_index=True)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea389caa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                route_name                                         route_link  \\\n",
      "0         Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1         Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2         Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3         Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4         Jodhpur to Ajmer  https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                    ...                                                ...   \n",
      "1041  Kangra to Chandigarh  https://www.redbus.in/bus-tickets/kangra-to-ch...   \n",
      "1042  Kangra to Chandigarh  https://www.redbus.in/bus-tickets/kangra-to-ch...   \n",
      "1043  Kangra to Chandigarh  https://www.redbus.in/bus-tickets/kangra-to-ch...   \n",
      "1044  Kangra to Chandigarh  https://www.redbus.in/bus-tickets/kangra-to-ch...   \n",
      "1045  Kangra to Chandigarh  https://www.redbus.in/bus-tickets/kangra-to-ch...   \n",
      "\n",
      "               busname                                    bustype  \\\n",
      "0       RSRTC - 160781  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "1       RSRTC - 192566              Semi Deluxe Non AC Seater 2+2   \n",
      "2       RSRTC - 146314  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "3       RSRTC - 185141  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "4       RSRTC - 193343              Semi Deluxe Non AC Seater 2+2   \n",
      "...                ...                                        ...   \n",
      "1041    Laxmi holidays               Volvo A/C Semi Sleeper (2+2)   \n",
      "1042      Zingbus Plus     Volvo Multi-Axle A/C Semisleeper (2+2)   \n",
      "1043      Bedi Travels              Volvo A/C Semi Sleeper (2+2 )   \n",
      "1044    Laxmi holidays          Volvo 9600 A/C Semi Sleeper (2+2)   \n",
      "1045  Northern Travels               Volvo A/C Semi Sleeper (2+2)   \n",
      "\n",
      "     departing_time duration reaching_time star_rating price seats_available  \n",
      "0             00:00  14h 00m         14:00         4.6   460              35  \n",
      "1             04:45  04h 30m         09:15         4.1   250              35  \n",
      "2             06:15  04h 00m         10:15         4.3   460              27  \n",
      "3             07:15  04h 00m         11:15         4.2   460              35  \n",
      "4             07:15  04h 45m         12:00         4.1   250              35  \n",
      "...             ...      ...           ...         ...   ...             ...  \n",
      "1041          22:00  05h 20m         03:20         3.6   899              38  \n",
      "1042          22:15  04h 40m         02:55         5.0   671              36  \n",
      "1043          22:15  04h 30m         02:45         4.7   684              29  \n",
      "1044          22:30  04h 50m         03:20         4.7   799              37  \n",
      "1045          19:45  05h 15m         01:00         2.7   712              39  \n",
      "\n",
      "[1046 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# experimental code (Himachal HRTC)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "himachal = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/hrtc\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", himachal) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "himachal_route_names = []\n",
    "himachal_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        himachal_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        himachal_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(1)\n",
    "    scrape_data()\n",
    "\n",
    "# print(himachal_route_names)\n",
    "# print(himachal_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in himachal_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(33):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 650);\")\n",
    "        time.sleep(0.25)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(himachal_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5d9cc4d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 route_name  \\\n",
      "0          Jodhpur to Ajmer   \n",
      "1          Jodhpur to Ajmer   \n",
      "2          Jodhpur to Ajmer   \n",
      "3          Jodhpur to Ajmer   \n",
      "4          Jodhpur to Ajmer   \n",
      "...                     ...   \n",
      "1520  Chandigarh to Patiala   \n",
      "1521  Chandigarh to Patiala   \n",
      "1522  Chandigarh to Patiala   \n",
      "1523  Chandigarh to Patiala   \n",
      "1524  Chandigarh to Patiala   \n",
      "\n",
      "                                             route_link  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                                                 ...   \n",
      "1520  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "1521  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "1522  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "1523  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "1524  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "\n",
      "                       busname                                    bustype  \\\n",
      "0               RSRTC - 160781  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "1               RSRTC - 192566              Semi Deluxe Non AC Seater 2+2   \n",
      "2               RSRTC - 146314  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "3               RSRTC - 185141  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "4               RSRTC - 193343              Semi Deluxe Non AC Seater 2+2   \n",
      "...                        ...                                        ...   \n",
      "1520  Orbit Aviation Pvt. Ltd.                           A/C Seater (2+2)   \n",
      "1521  Orbit Aviation Pvt. Ltd.                           A/C Seater (2+2)   \n",
      "1522  Orbit Aviation Pvt. Ltd.                           A/C Seater (2+2)   \n",
      "1523  Orbit Aviation Pvt. Ltd.                           A/C Seater (2+2)   \n",
      "1524     NEW FATEH BUS SERVICE               Volvo A/C Semi Sleeper (2+2)   \n",
      "\n",
      "     departing_time duration reaching_time star_rating price seats_available  \n",
      "0             00:00  14h 00m         14:00         4.6   460              35  \n",
      "1             04:45  04h 30m         09:15         4.1   250              35  \n",
      "2             06:15  04h 00m         10:15         4.3   460              27  \n",
      "3             07:15  04h 00m         11:15         4.2   460              35  \n",
      "4             07:15  04h 45m         12:00         4.1   250              35  \n",
      "...             ...      ...           ...         ...   ...             ...  \n",
      "1520          14:50  01h 40m         16:30         3.9   200              49  \n",
      "1521          13:55  01h 45m         15:40         2.5   200              45  \n",
      "1522          15:25  01h 20m         16:45         2.2   200              49  \n",
      "1523          16:55  01h 35m         18:30         2.7   200              45  \n",
      "1524          16:25  01h 35m         18:00         4.4   510              31  \n",
      "\n",
      "[1525 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# experimental code (punjab pepsu)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "punjab = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/pepsu-punjab\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", punjab) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "punjab_route_names = []\n",
    "punjab_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        punjab_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        punjab_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(1)\n",
    "    scrape_data()\n",
    "\n",
    "# print(punjab_route_names)\n",
    "# print(punjab_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in punjab_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(32):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 650);\")\n",
    "        time.sleep(0.25)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(punjab_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "21909654",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      route_name  \\\n",
      "0               Jodhpur to Ajmer   \n",
      "1               Jodhpur to Ajmer   \n",
      "2               Jodhpur to Ajmer   \n",
      "3               Jodhpur to Ajmer   \n",
      "4               Jodhpur to Ajmer   \n",
      "...                          ...   \n",
      "1679  Darbhanga to Patna (Bihar)   \n",
      "1680  Darbhanga to Patna (Bihar)   \n",
      "1681  Darbhanga to Patna (Bihar)   \n",
      "1682  Darbhanga to Patna (Bihar)   \n",
      "1683  Darbhanga to Patna (Bihar)   \n",
      "\n",
      "                                             route_link  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                                                 ...   \n",
      "1679  https://www.redbus.in/bus-tickets/darbhanga-to...   \n",
      "1680  https://www.redbus.in/bus-tickets/darbhanga-to...   \n",
      "1681  https://www.redbus.in/bus-tickets/darbhanga-to...   \n",
      "1682  https://www.redbus.in/bus-tickets/darbhanga-to...   \n",
      "1683  https://www.redbus.in/bus-tickets/darbhanga-to...   \n",
      "\n",
      "                            busname  \\\n",
      "0                    RSRTC - 160781   \n",
      "1                    RSRTC - 192566   \n",
      "2                    RSRTC - 146314   \n",
      "3                    RSRTC - 185141   \n",
      "4                    RSRTC - 193343   \n",
      "...                             ...   \n",
      "1679             Shiv Ganga Travels   \n",
      "1680             Shiv Ganga Travels   \n",
      "1681  Sri Krishna Tours and Travels   \n",
      "1682             Shiv Ganga Travels   \n",
      "1683                  Aarush Krrish   \n",
      "\n",
      "                                        bustype departing_time duration  \\\n",
      "0     Super Luxury Volvo AC Seater Pushback 2+2          00:00  14h 00m   \n",
      "1                 Semi Deluxe Non AC Seater 2+2          04:45  04h 30m   \n",
      "2     Super Luxury Volvo AC Seater Pushback 2+2          06:15  04h 00m   \n",
      "3     Super Luxury Volvo AC Seater Pushback 2+2          07:15  04h 00m   \n",
      "4                 Semi Deluxe Non AC Seater 2+2          07:15  04h 45m   \n",
      "...                                         ...            ...      ...   \n",
      "1679                            AC Seater (2+2)          10:46  03h 44m   \n",
      "1680                           A/C Seater (2+2)          11:13  03h 47m   \n",
      "1681                 A/C Seater Push Back (2+2)          12:20  03h 40m   \n",
      "1682                           A/C Seater (2+2)          14:06  03h 34m   \n",
      "1683                 A/C Seater / Sleeper (2+1)          01:00  04h 30m   \n",
      "\n",
      "     reaching_time star_rating price seats_available  \n",
      "0            14:00         4.6   460              35  \n",
      "1            09:15         4.1   250              35  \n",
      "2            10:15         4.3   460              27  \n",
      "3            11:15         4.2   460              35  \n",
      "4            12:00         4.1   250              35  \n",
      "...            ...         ...   ...             ...  \n",
      "1679         14:30         2.1   330              45  \n",
      "1680         15:00         2.1   330              28  \n",
      "1681         16:00         2.6   350              16  \n",
      "1682         17:40         2.1   330              28  \n",
      "1683         05:30         2.2   540              48  \n",
      "\n",
      "[1684 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# experimental code (BIHAR bsrtc)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "bihar = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/bihar-state-road-transport-corporation-bsrtc\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", bihar) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "bihar_route_names = []\n",
    "bihar_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        bihar_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        bihar_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(1)\n",
    "    scrape_data()\n",
    "\n",
    "# print(bihar_route_names)\n",
    "# print(bihar_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in bihar_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(30):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 650);\")\n",
    "        time.sleep(0.25)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(bihar_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9a4a8098",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                              route_name  \\\n",
      "0                       Jodhpur to Ajmer   \n",
      "1                       Jodhpur to Ajmer   \n",
      "2                       Jodhpur to Ajmer   \n",
      "3                       Jodhpur to Ajmer   \n",
      "4                       Jodhpur to Ajmer   \n",
      "...                                  ...   \n",
      "2095  Siliguri to Durgapur (West Bengal)   \n",
      "2096  Siliguri to Durgapur (West Bengal)   \n",
      "2097  Siliguri to Durgapur (West Bengal)   \n",
      "2098  Siliguri to Durgapur (West Bengal)   \n",
      "2099  Siliguri to Durgapur (West Bengal)   \n",
      "\n",
      "                                             route_link  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                                                 ...   \n",
      "2095  https://www.redbus.in/bus-tickets/siliguri-to-...   \n",
      "2096  https://www.redbus.in/bus-tickets/siliguri-to-...   \n",
      "2097  https://www.redbus.in/bus-tickets/siliguri-to-...   \n",
      "2098  https://www.redbus.in/bus-tickets/siliguri-to-...   \n",
      "2099  https://www.redbus.in/bus-tickets/siliguri-to-...   \n",
      "\n",
      "                              busname  \\\n",
      "0                      RSRTC - 160781   \n",
      "1                      RSRTC - 192566   \n",
      "2                      RSRTC - 146314   \n",
      "3                      RSRTC - 185141   \n",
      "4                      RSRTC - 193343   \n",
      "...                               ...   \n",
      "2095    Shreya Roadlines (Mangaldeep)   \n",
      "2096              Shivnarayan Travels   \n",
      "2097               Lady Diana Travels   \n",
      "2098                New Das Paribahan   \n",
      "2099  Shivnarayan Travels (Subhodeep)   \n",
      "\n",
      "                                        bustype departing_time duration  \\\n",
      "0     Super Luxury Volvo AC Seater Pushback 2+2          00:00  14h 00m   \n",
      "1                 Semi Deluxe Non AC Seater 2+2          04:45  04h 30m   \n",
      "2     Super Luxury Volvo AC Seater Pushback 2+2          06:15  04h 00m   \n",
      "3     Super Luxury Volvo AC Seater Pushback 2+2          07:15  04h 00m   \n",
      "4                 Semi Deluxe Non AC Seater 2+2          07:15  04h 45m   \n",
      "...                                         ...            ...      ...   \n",
      "2095             NON A/C Seater / Sleeper (2+2)          16:30  12h 10m   \n",
      "2096             NON A/C Seater / Sleeper (2+2)          17:30  11h 30m   \n",
      "2097             NON A/C Seater / Sleeper (2+2)          17:00  13h 00m   \n",
      "2098             NON A/C Seater / Sleeper (2+2)          15:40  12h 20m   \n",
      "2099             NON A/C Seater / Sleeper (2+2)          16:00  12h 00m   \n",
      "\n",
      "     reaching_time star_rating price seats_available  \n",
      "0            14:00         4.6   460              35  \n",
      "1            09:15         4.1   250              35  \n",
      "2            10:15         4.3   460              27  \n",
      "3            11:15         4.2   460              35  \n",
      "4            12:00         4.1   250              35  \n",
      "...            ...         ...   ...             ...  \n",
      "2095         04:40         2.0   600              20  \n",
      "2096         05:00         3.6   650              10  \n",
      "2097         06:00         3.2   600              20  \n",
      "2098         04:00         4.3   550              12  \n",
      "2099         04:00         2.2   650              10  \n",
      "\n",
      "[2100 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# experimental code (south bengal sbstc)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "s_bengal = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/south-bengal-state-transport-corporation-sbstc\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", s_bengal) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "s_bengal_route_names = []\n",
    "s_bengal_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        s_bengal_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        s_bengal_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(1)\n",
    "    scrape_data()\n",
    "\n",
    "# print(s_bengal_route_names)\n",
    "# print(s_bengal_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in s_bengal_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(25):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 650);\")\n",
    "        time.sleep(0.25)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict ={}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(s_bengal_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5b912e2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# experimental code (West bengal)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "w_bengal = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/west-bengal-transport-corporation\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", w_bengal) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "w_bengal_route_names = []\n",
    "w_bengal_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        w_bengal_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        w_bengal_route_links.append(href)\n",
    "\n",
    "# page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "# for i in range(len(page_tabs)):\n",
    "#     if i > 0:\n",
    "#         page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "#         driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "#         time.sleep(1)\n",
    "#     scrape_data()\n",
    "\n",
    "scrape_data()\n",
    "\n",
    "# print(w_bengal_route_names)\n",
    "# print(w_bengal_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in w_bengal_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(20):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 500);\")\n",
    "        time.sleep(0.3)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(w_bengal_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "493eabce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 route_name  \\\n",
      "0          Jodhpur to Ajmer   \n",
      "1          Jodhpur to Ajmer   \n",
      "2          Jodhpur to Ajmer   \n",
      "3          Jodhpur to Ajmer   \n",
      "4          Jodhpur to Ajmer   \n",
      "...                     ...   \n",
      "2205  Mandarmani to Kolkata   \n",
      "2206  Mandarmani to Kolkata   \n",
      "2207  Mandarmani to Kolkata   \n",
      "2208  Mandarmani to Kolkata   \n",
      "2209  Mandarmani to Kolkata   \n",
      "\n",
      "                                             route_link  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                                                 ...   \n",
      "2205  https://www.redbus.in/bus-tickets/mandarmani-t...   \n",
      "2206  https://www.redbus.in/bus-tickets/mandarmani-t...   \n",
      "2207  https://www.redbus.in/bus-tickets/mandarmani-t...   \n",
      "2208  https://www.redbus.in/bus-tickets/mandarmani-t...   \n",
      "2209  https://www.redbus.in/bus-tickets/mandarmani-t...   \n",
      "\n",
      "                         busname                                    bustype  \\\n",
      "0                 RSRTC - 160781  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "1                 RSRTC - 192566              Semi Deluxe Non AC Seater 2+2   \n",
      "2                 RSRTC - 146314  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "3                 RSRTC - 185141  Super Luxury Volvo AC Seater Pushback 2+2   \n",
      "4                 RSRTC - 193343              Semi Deluxe Non AC Seater 2+2   \n",
      "...                          ...                                        ...   \n",
      "2205         Santosh Bus Service                 A/C Seater Push Back (2+3)   \n",
      "2206          Adhikary Paribahan                 A/C Seater Push Back (2+3)   \n",
      "2207         Santosh Bus Service                 A/C Seater Push Back (2+3)   \n",
      "2208         Santosh Bus Service                 A/C Seater Push Back (2+3)   \n",
      "2209  Snemita Parisheba(Santosh)                            AC Seater (2+3)   \n",
      "\n",
      "     departing_time duration reaching_time star_rating price seats_available  \n",
      "0             00:00  14h 00m         14:00         4.6   460              35  \n",
      "1             04:45  04h 30m         09:15         4.1   250              35  \n",
      "2             06:15  04h 00m         10:15         4.3   460              27  \n",
      "3             07:15  04h 00m         11:15         4.2   460              35  \n",
      "4             07:15  04h 45m         12:00         4.1   250              35  \n",
      "...             ...      ...           ...         ...   ...             ...  \n",
      "2205          05:15  03h 45m         09:00         4.2   287              39  \n",
      "2206          08:25  03h 50m         12:15         3.4   249              33  \n",
      "2207          14:00  04h 05m         18:05         3.9   415               6  \n",
      "2208          10:30  03h 50m         14:20         3.4   415              26  \n",
      "2209          14:05  04h 00m         18:05         3.6   428              29  \n",
      "\n",
      "[2210 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bc0b16c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   route_name  \\\n",
      "0            Jodhpur to Ajmer   \n",
      "1            Jodhpur to Ajmer   \n",
      "2            Jodhpur to Ajmer   \n",
      "3            Jodhpur to Ajmer   \n",
      "4            Jodhpur to Ajmer   \n",
      "...                       ...   \n",
      "2885  Chandigarh to Jawala Ji   \n",
      "2886  Chandigarh to Jawala Ji   \n",
      "2887  Chandigarh to Jawala Ji   \n",
      "2888  Chandigarh to Jawala Ji   \n",
      "2889  Chandigarh to Jawala Ji   \n",
      "\n",
      "                                             route_link  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                                                 ...   \n",
      "2885  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "2886  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "2887  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "2888  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "2889  https://www.redbus.in/bus-tickets/chandigarh-t...   \n",
      "\n",
      "                                                busname  \\\n",
      "0                                        RSRTC - 160781   \n",
      "1                                        RSRTC - 192566   \n",
      "2                                        RSRTC - 146314   \n",
      "3                                        RSRTC - 185141   \n",
      "4                                        RSRTC - 193343   \n",
      "...                                                 ...   \n",
      "2885                               New Himalaya Travels   \n",
      "2886  Asian's Shina Tour & Travels (Swoyambhu Manjus...   \n",
      "2887                                   Northern Travels   \n",
      "2888                                   PAL Travel Lines   \n",
      "2889  Asian's Shina Tour & Travels (Swoyambhu Manjus...   \n",
      "\n",
      "                                        bustype departing_time duration  \\\n",
      "0     Super Luxury Volvo AC Seater Pushback 2+2          00:00  14h 00m   \n",
      "1                 Semi Deluxe Non AC Seater 2+2          04:45  04h 30m   \n",
      "2     Super Luxury Volvo AC Seater Pushback 2+2          06:15  04h 00m   \n",
      "3     Super Luxury Volvo AC Seater Pushback 2+2          07:15  04h 00m   \n",
      "4                 Semi Deluxe Non AC Seater 2+2          07:15  04h 45m   \n",
      "...                                         ...            ...      ...   \n",
      "2885               Volvo A/C Semi Sleeper (2+2)          01:50  02h 45m   \n",
      "2886                     A/C Semi Sleeper (2+2)          00:29  04h 31m   \n",
      "2887               Volvo A/C Semi Sleeper (2+2)          01:20  04h 55m   \n",
      "2888         Bharat Benz A/C Semi Sleeper (2+2)          02:04  04h 01m   \n",
      "2889                 NON A/C Semi Sleeper (2+2)          23:55  05h 05m   \n",
      "\n",
      "     reaching_time star_rating price seats_available  \n",
      "0            14:00         4.6   460              35  \n",
      "1            09:15         4.1   250              35  \n",
      "2            10:15         4.3   460              27  \n",
      "3            11:15         4.2   460              35  \n",
      "4            12:00         4.1   250              35  \n",
      "...            ...         ...   ...             ...  \n",
      "2885         04:35         4.4   549              22  \n",
      "2886         05:00         2.5   999               1  \n",
      "2887         06:15         2.7   665              17  \n",
      "2888         06:05         2.9  1619              16  \n",
      "2889         05:00         2.5   999              29  \n",
      "\n",
      "[2890 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# experimental code (Chandigarh CTU)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "chandigarh = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/chandigarh-transport-undertaking-ctu\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", chandigarh) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "chandigarh_route_names = []\n",
    "chandigarh_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        chandigarh_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        chandigarh_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(1)\n",
    "    scrape_data()\n",
    "\n",
    "\n",
    "# print(chandigarh_route_names)\n",
    "# print(chandigarh_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in chandigarh_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(20):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 500);\")\n",
    "        time.sleep(0.3)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(chandigarh_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cc76b21b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       route_name  \\\n",
      "0                Jodhpur to Ajmer   \n",
      "1                Jodhpur to Ajmer   \n",
      "2                Jodhpur to Ajmer   \n",
      "3                Jodhpur to Ajmer   \n",
      "4                Jodhpur to Ajmer   \n",
      "...                           ...   \n",
      "2961           Tinsukia to Tezpur   \n",
      "2962           Tinsukia to Tezpur   \n",
      "2963           Tinsukia to Tezpur   \n",
      "2964  North Lakhimpur to Golaghat   \n",
      "2965        Dibrugarh to Bihpuria   \n",
      "\n",
      "                                             route_link  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...   \n",
      "...                                                 ...   \n",
      "2961  https://www.redbus.in/bus-tickets/tinsukia-to-...   \n",
      "2962  https://www.redbus.in/bus-tickets/tinsukia-to-...   \n",
      "2963  https://www.redbus.in/bus-tickets/tinsukia-to-...   \n",
      "2964  https://www.redbus.in/bus-tickets/north-lakhim...   \n",
      "2965  https://www.redbus.in/bus-tickets/dibrugarh-to...   \n",
      "\n",
      "                                                busname  \\\n",
      "0                                        RSRTC - 160781   \n",
      "1                                        RSRTC - 192566   \n",
      "2                                        RSRTC - 146314   \n",
      "3                                        RSRTC - 185141   \n",
      "4                                        RSRTC - 193343   \n",
      "...                                                 ...   \n",
      "2961                                          Maa Laxmi   \n",
      "2962                                       MOON TRAVELS   \n",
      "2963                                       Neha Travels   \n",
      "2964  Assam State Transport Corporation (ASTC) - 142181   \n",
      "2965  Assam State Transport Corporation (ASTC) - 147556   \n",
      "\n",
      "                                        bustype departing_time duration  \\\n",
      "0     Super Luxury Volvo AC Seater Pushback 2+2          00:00  14h 00m   \n",
      "1                 Semi Deluxe Non AC Seater 2+2          04:45  04h 30m   \n",
      "2     Super Luxury Volvo AC Seater Pushback 2+2          06:15  04h 00m   \n",
      "3     Super Luxury Volvo AC Seater Pushback 2+2          07:15  04h 00m   \n",
      "4                 Semi Deluxe Non AC Seater 2+2          07:15  04h 45m   \n",
      "...                                         ...            ...      ...   \n",
      "2961             NON A/C Seater Push Back (2+1)          16:00  09h 00m   \n",
      "2962                            AC Seater (2+2)          07:45  09h 15m   \n",
      "2963                       NON A/C Seater (2+2)          15:30  13h 30m   \n",
      "2964               Bharat Benz A/C Seater (2+2)          06:30  07h 30m   \n",
      "2965               Bharat Benz A/C Seater (2+2)          12:30  04h 15m   \n",
      "\n",
      "     reaching_time star_rating  price seats_available  \n",
      "0            14:00         4.6    460              35  \n",
      "1            09:15         4.1    250              35  \n",
      "2            10:15         4.3    460              27  \n",
      "3            11:15         4.2    460              35  \n",
      "4            12:00         4.1    250              35  \n",
      "...            ...         ...    ...             ...  \n",
      "2961         01:00         2.7    550              36  \n",
      "2962         17:00         2.5    618              39  \n",
      "2963         05:00         1.9    650              35  \n",
      "2964         14:00         3.4    503               1  \n",
      "2965         16:45         4.4  292.6              33  \n",
      "\n",
      "[2966 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# experimental code (Assam ASTC)\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "assam = driver.find_element(By.CSS_SELECTOR, 'a[href=\"/online-booking/astc\"]')\n",
    "driver.execute_script(\"arguments[0].click();\", assam) \n",
    "time.sleep(2)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "assam_route_names = []\n",
    "assam_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_names = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_name in route_names:\n",
    "        assam_route_names.append(route_name.text)\n",
    "\n",
    "    route_links = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    hrefs = [route_link.get_attribute('href') for route_link in route_links]\n",
    "    for href in hrefs:\n",
    "        assam_route_links.append(href)\n",
    "\n",
    "page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = driver.find_elements(By.CLASS_NAME, \"DC_117_pageTabs \")[i]\n",
    "        driver.execute_script(\"arguments[0].click();\", page_tabs)        \n",
    "        time.sleep(1)\n",
    "    scrape_data()\n",
    "\n",
    "\n",
    "# print(assam_route_names)\n",
    "# print(assam_route_links)\n",
    "\n",
    "\n",
    "count = 0\n",
    "for link in assam_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "\n",
    "    try:\n",
    "        wait = WebDriverWait(driver, 3)\n",
    "        wait_button = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"button\")))\n",
    "        driver.execute_script(\"arguments[0].click();\", wait_button)\n",
    "        # government_buses = driver.find_element(By.CLASS_NAME, \"button\")\n",
    "        #driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "        \n",
    "    except NoSuchElementException:\n",
    "        pass\n",
    "    except TimeoutException:\n",
    "        pass\n",
    "\n",
    "    # government_buses = driver.find_element(By.CLASS_NAME, \"p-left-10\")\n",
    "    # driver.execute_script(\"arguments[0].click();\", government_buses)\n",
    "    # time.sleep(1)\n",
    "\n",
    "    for t in range(20):     #scrolling 12 times so that whole website loads\n",
    "        driver.execute_script(\"window.scrollBy(0, 500);\")\n",
    "        time.sleep(0.3)\n",
    "\n",
    "    \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "\n",
    "    names = driver.find_elements(By.CLASS_NAME,\"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME,\"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME,\"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME,\"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME,\"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME,\"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME,\"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME,\"seat-left\")\n",
    "\n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "\n",
    "    for type in types:\n",
    "        bus_type.append(type.text)\n",
    "\n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "\n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "\n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "\n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "\n",
    "    for fare in fares:\n",
    "        if (fare.text).isdigit():\n",
    "            price.append(fare.text)\n",
    "        else:\n",
    "            price.append((fare.text).replace('INR','').strip())\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "    \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(assam_route_names[count])\n",
    "        route_link.append(link)\n",
    "\n",
    "    count += 1\n",
    "\n",
    "\n",
    "    # print(route_name)\n",
    "    # print(route_link)\n",
    "    # print(bus_name)\n",
    "    # print(bus_type)\n",
    "    # print(departing)\n",
    "    # print(duration)\n",
    "    # print(reaching)\n",
    "    # print(rating)\n",
    "    # print(price)\n",
    "    # print(availability)\n",
    "\n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == ' ':\n",
    "            rating[i] = '0.0'\n",
    "\n",
    "    dict = {'route_name':route_name, 'route_link':route_link, 'busname':bus_name, 'bustype':bus_type, 'departing_time':departing,\n",
    "            'duration':duration, 'reaching_time':reaching, 'star_rating':rating, 'price':price, 'seats_available':availability}\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1cef8e3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  route_name  \\\n",
      "0           Jodhpur to Ajmer   \n",
      "1           Jodhpur to Ajmer   \n",
      "2           Jodhpur to Ajmer   \n",
      "3           Jodhpur to Ajmer   \n",
      "4           Jodhpur to Ajmer   \n",
      "...                      ...   \n",
      "3351  Mopa Airport to Margao   \n",
      "3352  Mopa Airport to Margao   \n",
      "3353  Mopa Airport to Margao   \n",
      "3354  Panaji to Mopa Airport   \n",
      "3355  Calangute (goa) to Goa   \n",
      "\n",
      "                                             route_link         busname  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 160781   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 192566   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 146314   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 185141   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 193343   \n",
      "...                                                 ...             ...   \n",
      "3351  https://www.redbus.in/bus-tickets/mopa-airport...             NaN   \n",
      "3352  https://www.redbus.in/bus-tickets/mopa-airport...             NaN   \n",
      "3353  https://www.redbus.in/bus-tickets/mopa-airport...             NaN   \n",
      "3354  https://www.redbus.in/bus-tickets/panaji-to-mo...             NaN   \n",
      "3355  https://www.redbus.in/bus-tickets/calangute-go...             NaN   \n",
      "\n",
      "                                        bustype departing_time duration  \\\n",
      "0     Super Luxury Volvo AC Seater Pushback 2+2          00:00  14h 00m   \n",
      "1                 Semi Deluxe Non AC Seater 2+2          04:45  04h 30m   \n",
      "2     Super Luxury Volvo AC Seater Pushback 2+2          06:15  04h 00m   \n",
      "3     Super Luxury Volvo AC Seater Pushback 2+2          07:15  04h 00m   \n",
      "4                 Semi Deluxe Non AC Seater 2+2          07:15  04h 45m   \n",
      "...                                         ...            ...      ...   \n",
      "3351                                        NaN          16:00  00h 25m   \n",
      "3352                                        NaN          16:00  02h 00m   \n",
      "3353                                        NaN          17:30  00h 30m   \n",
      "3354                                        NaN          13:30  01h 00m   \n",
      "3355                                        NaN          08:30  11h 30m   \n",
      "\n",
      "     reaching_time star_rating price seats_available  \\\n",
      "0            14:00         4.6   460              35   \n",
      "1            09:15         4.1   250              35   \n",
      "2            10:15         4.3   460              27   \n",
      "3            11:15         4.2   460              35   \n",
      "4            12:00         4.1   250              35   \n",
      "...            ...         ...   ...             ...   \n",
      "3351         16:25         3.7   NaN             NaN   \n",
      "3352         18:00         4.9   NaN             NaN   \n",
      "3353         18:00         3.7   NaN             NaN   \n",
      "3354         14:30         3.7   NaN             NaN   \n",
      "3355         20:00               NaN             NaN   \n",
      "\n",
      "                                               bus_name  \\\n",
      "0                                                   NaN   \n",
      "1                                                   NaN   \n",
      "2                                                   NaN   \n",
      "3                                                   NaN   \n",
      "4                                                   NaN   \n",
      "...                                                 ...   \n",
      "3351  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3352  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3353  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3354  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3355                           UNIQUE TOURS AND TRAVELS   \n",
      "\n",
      "                        bus_type seat_available  \n",
      "0                            NaN            NaN  \n",
      "1                            NaN            NaN  \n",
      "2                            NaN            NaN  \n",
      "3                            NaN            NaN  \n",
      "4                            NaN            NaN  \n",
      "...                          ...            ...  \n",
      "3351            A/C Seater (2+3)             47  \n",
      "3352            A/C Seater (2+3)             47  \n",
      "3353            A/C Seater (2+3)             47  \n",
      "3354            A/C Seater (2+3)             47  \n",
      "3355  A/C Seater Push Back (2+1)             17  \n",
      "\n",
      "[3356 rows x 13 columns]\n"
     ]
    }
   ],
   "source": [
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"https://www.redbus.in/online-booking/rtc-directory\")\n",
    "driver.maximize_window()\n",
    "\n",
    "# Explicit wait for the element to be clickable\n",
    "kadamba = WebDriverWait(driver, 10).until(\n",
    "    EC.element_to_be_clickable((By.CSS_SELECTOR, 'a[href=\"/online-booking/ktcl\"]'))\n",
    ")\n",
    "\n",
    "# Scroll the element into view using JavaScript\n",
    "driver.execute_script(\"arguments[0].scrollIntoView(true);\", kadamba)\n",
    "time.sleep(1)  # Wait a bit for the scroll to complete\n",
    "\n",
    "# Click the element using ActionChains\n",
    "ActionChains(driver).move_to_element(kadamba).click().perform()\n",
    "\n",
    "time.sleep(5)\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "driver.execute_script(\"window.scrollBy(0, window.innerHeight);\")\n",
    "\n",
    "kadamba_route_names = []\n",
    "kadamba_route_links = []\n",
    "\n",
    "def scrape_data():\n",
    "    route_elements = driver.find_elements(By.CLASS_NAME, \"route\")\n",
    "    for route_element in route_elements:\n",
    "        kadamba_route_names.append(route_element.text)\n",
    "        kadamba_route_links.append(route_element.get_attribute('href'))\n",
    "\n",
    "# Using explicit wait for the page tabs\n",
    "page_tabs = WebDriverWait(driver, 10).until(\n",
    "    EC.presence_of_all_elements_located((By.CLASS_NAME, \"DC_117_pageTabs\"))\n",
    ")\n",
    "\n",
    "for i in range(len(page_tabs)):\n",
    "    if i > 0:\n",
    "        page_tabs = WebDriverWait(driver, 10).until(\n",
    "            EC.presence_of_all_elements_located((By.CLASS_NAME, \"DC_117_pageTabs\"))\n",
    "        )\n",
    "        ActionChains(driver).move_to_element(page_tabs[i]).click().perform()\n",
    "        time.sleep(2)\n",
    "    scrape_data()\n",
    "\n",
    "count = 0\n",
    "\n",
    "for link in kadamba_route_links:\n",
    "    driver.get(link)\n",
    "    driver.maximize_window()\n",
    "    \n",
    "    for t in range(22):\n",
    "        driver.execute_script(\"window.scrollBy(0,500);\")\n",
    "        time.sleep(0.5)\n",
    "        \n",
    "    route_name = []\n",
    "    route_link = []\n",
    "    bus_name = []\n",
    "    bus_type = []\n",
    "    departing = []\n",
    "    duration = []\n",
    "    reaching = []\n",
    "    rating = []\n",
    "    price = []\n",
    "    availability = []\n",
    "    dict = {}\n",
    "    df1 = pd.DataFrame()\n",
    "    \n",
    "    names = driver.find_elements(By.CLASS_NAME, \"travels\")\n",
    "    types = driver.find_elements(By.CLASS_NAME, \"bus-type\")\n",
    "    depart_timings = driver.find_elements(By.CLASS_NAME, \"dp-time\")\n",
    "    travel_durations = driver.find_elements(By.CLASS_NAME, \"dur\")\n",
    "    arrivals = driver.find_elements(By.CLASS_NAME, \"bp-time\")\n",
    "    star_ratings = driver.find_elements(By.CLASS_NAME, \"column-six\")\n",
    "    fares = driver.find_elements(By.CLASS_NAME, \"fare\")\n",
    "    seats_available = driver.find_elements(By.CLASS_NAME, \"seat-left\")\n",
    "    \n",
    "    for name in names:\n",
    "        bus_name.append(name.text)\n",
    "    \n",
    "    for bus_type_element in types:\n",
    "        bus_type.append(bus_type_element.text)\n",
    "        \n",
    "    for depart_timing in depart_timings:\n",
    "        departing.append(depart_timing.text)\n",
    "        \n",
    "    for travel_duration in travel_durations:\n",
    "        duration.append(travel_duration.text)\n",
    "        \n",
    "    for arrival in arrivals:\n",
    "        reaching.append(arrival.text)\n",
    "        \n",
    "    for star_rating in star_ratings:\n",
    "        rating.append(star_rating.text[:3])\n",
    "        \n",
    "    for fare in fares:\n",
    "        price.append(fare.text.replace('INR', '').strip() if not fare.text.isdigit() else fare.text)\n",
    "\n",
    "    for seat_available in seats_available:\n",
    "        availability.append(seat_available.text[:2].strip())\n",
    "        \n",
    "    for i in range(len(bus_name)):\n",
    "        route_name.append(kadamba_route_names[count])\n",
    "        route_link.append(link)\n",
    "        \n",
    "    count += 1\n",
    "    \n",
    "    for i in range(len(rating)):\n",
    "        if rating[i] == 'New' or rating[i] == '':\n",
    "            rating[i] = '0.0'\n",
    "            \n",
    "    dict = {\n",
    "        'route_name': route_name,\n",
    "        'route_link': route_link,\n",
    "        'bus_name': bus_name,\n",
    "        'bus_type': bus_type,\n",
    "        'departing_time': departing,\n",
    "        'duration': duration,\n",
    "        'reaching_time': reaching,\n",
    "        'star_rating': rating,\n",
    "        'seat_available': availability\n",
    "    }\n",
    "    \n",
    "    df1 = pd.DataFrame(dict)\n",
    "    df = pd.concat([df, df1], ignore_index=True)\n",
    "    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1d5115b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('final_dcsv.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb46838b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0           int64\n",
      "route_name          object\n",
      "route_link          object\n",
      "busname             object\n",
      "bustype             object\n",
      "departing_time      object\n",
      "duration            object\n",
      "reaching_time       object\n",
      "star_rating         object\n",
      "price              float64\n",
      "seats_available    float64\n",
      "bus_name            object\n",
      "bus_type            object\n",
      "seat_available       int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('final_dcsv.csv')\n",
    "df['seat_available'] = df['seat_available'].fillna(0).astype('int64')\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a16be49b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.fillna({\n",
    "    'route_name': '',\n",
    "    'route_link': '',\n",
    "    'busname': '',\n",
    "    'bustype': '',\n",
    "    'departing_time': '00:00:00',\n",
    "    'duration': '0h 0m',\n",
    "    'reaching_time': '00:00:00',\n",
    "    'star_rating': 0.0,\n",
    "    'price': 0.0,\n",
    "    'seats_available': 0\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cfc1a423",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Unnamed: 0              route_name  \\\n",
      "0              0        Jodhpur to Ajmer   \n",
      "1              1        Jodhpur to Ajmer   \n",
      "2              2        Jodhpur to Ajmer   \n",
      "3              3        Jodhpur to Ajmer   \n",
      "4              4        Jodhpur to Ajmer   \n",
      "...          ...                     ...   \n",
      "3351        3351  Mopa Airport to Margao   \n",
      "3352        3352  Mopa Airport to Margao   \n",
      "3353        3353  Mopa Airport to Margao   \n",
      "3354        3354  Panaji to Mopa Airport   \n",
      "3355        3355  Calangute (goa) to Goa   \n",
      "\n",
      "                                             route_link         busname  \\\n",
      "0     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 160781   \n",
      "1     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 192566   \n",
      "2     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 146314   \n",
      "3     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 185141   \n",
      "4     https://www.redbus.in/bus-tickets/jodhpur-to-a...  RSRTC - 193343   \n",
      "...                                                 ...             ...   \n",
      "3351  https://www.redbus.in/bus-tickets/mopa-airport...                   \n",
      "3352  https://www.redbus.in/bus-tickets/mopa-airport...                   \n",
      "3353  https://www.redbus.in/bus-tickets/mopa-airport...                   \n",
      "3354  https://www.redbus.in/bus-tickets/panaji-to-mo...                   \n",
      "3355  https://www.redbus.in/bus-tickets/calangute-go...                   \n",
      "\n",
      "                                        bustype departing_time duration  \\\n",
      "0     Super Luxury Volvo AC Seater Pushback 2+2       00:00:00  14h 00m   \n",
      "1                 Semi Deluxe Non AC Seater 2+2       04:45:00  04h 30m   \n",
      "2     Super Luxury Volvo AC Seater Pushback 2+2       06:15:00  04h 00m   \n",
      "3     Super Luxury Volvo AC Seater Pushback 2+2       07:15:00  04h 00m   \n",
      "4                 Semi Deluxe Non AC Seater 2+2       07:15:00  04h 45m   \n",
      "...                                         ...            ...      ...   \n",
      "3351                                                  16:00:00  00h 25m   \n",
      "3352                                                  16:00:00  02h 00m   \n",
      "3353                                                  17:30:00  00h 30m   \n",
      "3354                                                  13:30:00  01h 00m   \n",
      "3355                                                  08:30:00  11h 30m   \n",
      "\n",
      "     reaching_time  star_rating  price  seats_available  \\\n",
      "0         14:00:00          4.6  460.0             35.0   \n",
      "1         09:15:00          4.1  250.0             35.0   \n",
      "2         10:15:00          4.3  460.0             27.0   \n",
      "3         11:15:00          4.2  460.0             35.0   \n",
      "4         12:00:00          4.1  250.0             35.0   \n",
      "...            ...          ...    ...              ...   \n",
      "3351      16:25:00          3.7    0.0              0.0   \n",
      "3352      18:00:00          4.9    0.0              0.0   \n",
      "3353      18:00:00          3.7    0.0              0.0   \n",
      "3354      14:30:00          3.7    0.0              0.0   \n",
      "3355      20:00:00          0.0    0.0              0.0   \n",
      "\n",
      "                                               bus_name  \\\n",
      "0                                                   NaN   \n",
      "1                                                   NaN   \n",
      "2                                                   NaN   \n",
      "3                                                   NaN   \n",
      "4                                                   NaN   \n",
      "...                                                 ...   \n",
      "3351  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3352  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3353  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3354  Kadamba Transport Corporation Limited (KTCL) -...   \n",
      "3355                           UNIQUE TOURS AND TRAVELS   \n",
      "\n",
      "                        bus_type  seat_available  \n",
      "0                            NaN               0  \n",
      "1                            NaN               0  \n",
      "2                            NaN               0  \n",
      "3                            NaN               0  \n",
      "4                            NaN               0  \n",
      "...                          ...             ...  \n",
      "3351            A/C Seater (2+3)              47  \n",
      "3352            A/C Seater (2+3)              47  \n",
      "3353            A/C Seater (2+3)              47  \n",
      "3354            A/C Seater (2+3)              47  \n",
      "3355  A/C Seater Push Back (2+1)              17  \n",
      "\n",
      "[3356 rows x 14 columns]\n"
     ]
    }
   ],
   "source": [
    "def normalize_time(time_str):\n",
    "    if len(time_str) == 5:  # If format is \"%H:%M\"\n",
    "        return time_str + \":00\"  # Add seconds\n",
    "    return time_str\n",
    "# Normalize the time strings\n",
    "df['departing_time'] = df['departing_time'].apply(normalize_time)\n",
    "df['reaching_time'] = df['reaching_time'].apply(normalize_time)\n",
    "# Convert to datetime\n",
    "df['departing_time'] = pd.to_datetime(df['departing_time'], format='%H:%M:%S').dt.time\n",
    "df['reaching_time'] = pd.to_datetime(df['reaching_time'], format='%H:%M:%S').dt.time\n",
    "\n",
    "# Ensure other columns are correctly formatted\n",
    "df['star_rating'] = pd.to_numeric(df['star_rating'], errors='coerce').fillna(0.0).astype(float).round(1)\n",
    "df['price'] = pd.to_numeric(df['price'], errors='coerce').fillna(0.0).astype(float)\n",
    "\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0a4806bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector\n",
    "\n",
    "# Connect to MySQL and create database and table\n",
    "con = mysql.connector.connect(\n",
    "    host=\"localhost\",\n",
    "    user=\"root\",\n",
    "    password=\"Saran@123\"\n",
    ")\n",
    "cursor = con.cursor()\n",
    "\n",
    "# Create database if not exists\n",
    "cursor.execute(\"CREATE DATABASE IF NOT EXISTS redbus_data_project\")\n",
    "cursor.execute(\"USE redbus_data_project\")\n",
    "\n",
    "# Create table if not exists\n",
    "query = \"\"\"CREATE TABLE IF NOT EXISTS All_bus_data (\n",
    "    id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "    route_name VARCHAR(70),\n",
    "    route_link VARCHAR(180),\n",
    "    busname VARCHAR(100),\n",
    "    bustype VARCHAR(50),\n",
    "    departing_time TIME,\n",
    "    duration VARCHAR(20),\n",
    "    reaching_time TIME,\n",
    "    star_rating FLOAT(2,1),\n",
    "    price DECIMAL(7, 2),\n",
    "    seats_available INT\n",
    ")\"\"\"\n",
    "cursor.execute(query)\n",
    "\n",
    "# Close the cursor and connection\n",
    "cursor.close()\n",
    "con.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b8655392",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector\n",
    "import pandas as pd\n",
    "\n",
    "# Load your DataFrame here (df should be defined)\n",
    "# df = pd.read_csv('your_data_file.csv')  # Example\n",
    "\n",
    "# Connect to MySQL\n",
    "con = mysql.connector.connect(\n",
    "    host=\"localhost\",\n",
    "    user=\"root\",\n",
    "    password=\"Saran@123\",\n",
    "    database=\"redbus_data_project\"\n",
    ")\n",
    "cursor = con.cursor()\n",
    "\n",
    "# Insert data\n",
    "query = \"\"\"INSERT INTO All_bus_data (\n",
    "    route_name, route_link, busname, bustype, departing_time, duration,\n",
    "    reaching_time, star_rating, price, seats_available\n",
    ") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\"\"\"\n",
    "for i in range(len(df)):\n",
    "    data = (\n",
    "        df.loc[i, 'route_name'],\n",
    "        df.loc[i, 'route_link'],\n",
    "        df.loc[i, 'busname'],\n",
    "        df.loc[i, 'bustype'],\n",
    "        df.loc[i, 'departing_time'],\n",
    "        df.loc[i, 'duration'],\n",
    "        df.loc[i, 'reaching_time'],\n",
    "        df.loc[i, 'star_rating'],\n",
    "        df.loc[i, 'price'],\n",
    "        df.loc[i, 'seats_available']\n",
    "    )\n",
    "    cursor.execute(query, data)\n",
    "    con.commit()\n",
    "\n",
    "# Close the cursor and connection\n",
    "cursor.close()\n",
    "con.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2d4e534",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
